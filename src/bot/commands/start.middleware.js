const { joinMessage, handleError, telegramUtil } = require('../../utils');

class StartMiddleware {
  /**
   * @param {Telegraf} bot
   * */
  constructor(bot) {
    this.bot = bot;
  }

  /**
   * Handle /start
   * Returns help message
   *
   * */
  middleware() {
    /**
     * @param {TelegrafContext} ctx
     * */
    return (ctx) => {
      if (ctx?.update?.message?.chat?.type === 'private') {
        return ctx
          .reply(
            joinMessage([
              '–ü—Ä–∏–≤—ñ—Ç! üá∫üá¶‚úåÔ∏è',
              '',
              '–Ø —á–∞—Ç-–±–æ—Ç, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç—è—Ç—å –Ω–∞–∑–≤–∏ –ª–æ–∫–∞—Ü—ñ–π –º—ñ—Å—Ç–∞, —É–∫—Ä–∏—Ç—Ç—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫.',
              '',
              '<b>–Ø–∫ –º–µ–Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏?</b>',
              '',
              '–î–æ–¥–∞–π –º–µ–Ω–µ —ñ –∑—Ä–æ–±–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:',
              '‚Ä¢ –ê–±–æ –≤ –∑–≤–∏—á–∞–π–Ω—É –≥—Ä—É–ø—É;',
              '‚Ä¢ –ê–±–æ –≤ —á–∞—Ç –∫–∞–Ω–∞–ª—É.',
              '',
              '–Ø–∫—â–æ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–∏—à—ñ—Ç—å @dimkasmile',
            ]),
            { parse_mode: 'HTML' },
          )
          .catch(handleError);
      }

      telegramUtil.getChatAdmins(this.bot, ctx.chat.id).then(({ adminsString }) => {
        ctx
          .reply(
            joinMessage([
              '<b>–ó—Ä–æ–±–∏ –º–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —â–æ–± —è –º—ñ–≥ –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.</b>',
              '',
              adminsString ? `–¶–µ –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏: ${adminsString}` : '–¶–µ –º–æ–∂–µ –∑—Ä–æ–±–∏—Ç–∏ —Ç–≤–æ—Ä–µ—Ü—å —á–∞—Ç—É',
            ]).trim(),
            { parse_mode: 'HTML' },
          )
          .catch((getAdminsError) => {
            handleError(getAdminsError);
            ctx.reply(joinMessage(['<b>–ó—Ä–æ–±–∏ –º–µ–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —â–æ–± —è –º—ñ–≥ –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.</b>']), { parse_mode: 'HTML' });
          });
      });
    };
  }
}

module.exports = {
  StartMiddleware,
};
