import Bottleneck from 'bottleneck';
import { Composer } from 'grammy';

import { getSuccessfulMessage, getUpdateMessage } from '../../message';
import { redisService } from '../../services';
import type { ChatSession, GrammyContext } from '../../types';
import { handleError } from '../../utils';

const supportChatId = -1_001_788_350_185;
const pollId = 4080;

async function bulkSending(context: GrammyContext, sessions: ChatSession[]) {
  return new Promise<void>((resolve) => {
    const limiter = new Bottleneck({
      maxConcurrent: 1,
      minTime: 3000,
    });

    const message = `<b>–í—ñ—Ç–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ UA Anti Spam Bot! üá∫üá¶</b>

–ú–∏ –ø–ª–∞–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª, —è–∫–∏–π –¥–æ–∑–≤–æ–ª–∏—Ç—å –±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –¥–æ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–Ω–∞—Å—Ç—É–ø—É. –ó–∞–π–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤ –º–µ—Ä–µ–∂—ñ —Ç—ñ–ª—å–∫–∏ —à–∫–æ–¥–∏—Ç—å –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ.

–ß–∏ –±—É–¥–µ —Ç–∞–∫–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É –∞–±–æ –≥—Ä—É–ø–∏? –ú–∏ –≤–∫—Ä–∞–π –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ —É –≤–∞—à—ñ–π –¥—É–º—Ü—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –±—É–¥–µ –≤–∞–∂–ª–∏–≤–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É –ø—Ä–∏–π–Ω—è—Ç—Ç—ñ —Ä—ñ—à–µ–Ω–Ω—è —â–æ–¥–æ —Å—Ç–∞—Ä—Ç—É —Ä–æ–∑—Ä–æ–±–∫–∏. –ß–µ–∫–∞—î–º–æ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.

–î—è–∫—É—é!`.trim();

    const totalCount = sessions.length;
    const chunkSize = Math.ceil(totalCount / 10);
    let finishedCount = 0;
    let successCount = 0;

    sessions.forEach((chartSession) => {
      limiter
        .schedule(async () => {
          await context.api
            .sendMessage(chartSession.id, message, { parse_mode: 'HTML' })
            .then(() => {
              successCount += 1;
            })
            .catch(handleError)
            .finally(() => {
              finishedCount += 1;
            });

          await context.api.forwardMessage(+chartSession.id, supportChatId, pollId);
        })
        .catch(handleError);
    });

    limiter.on('done', () => {
      if (finishedCount % chunkSize === 0) {
        context.reply(getUpdateMessage({ totalCount, successCount, finishedCount, type: 'feature_poll' })).catch(handleError);
      }
    });

    limiter.on('empty', () => {
      context.reply(getSuccessfulMessage({ totalCount, successCount })).catch(handleError);
      resolve();
    });
  });
}

export const featurePollComposer = new Composer<GrammyContext>();

featurePollComposer.command('feature_poll', async (context) => {
  const allSessions = await redisService.getChatSessions();
  const superGroupsSessions = allSessions
    .filter((session) => session.data.chatType === 'supergroup' && !session.data.botRemoved && session.data.chatMembersCount)
    .filter((session) => +session.id !== supportChatId);

  const sortedSuperGroupsSessions = superGroupsSessions.sort((a, b) => b.data.chatMembersCount - a.data.chatMembersCount);

  const sessions = sortedSuperGroupsSessions.slice(10, 60);

  await context.reply('Check if has access to the group');
  await context.api.getChat(supportChatId);

  if (sessions.length > 0) {
    await context.reply(`Started feature poll, sessions: ${sessions.length}`);
    await bulkSending(context, sessions);
    await context.reply('Ended feature poll');
  } else {
    await context.reply(`There are no sessions. Total sessions: ${sortedSuperGroupsSessions.length}`);
  }
});
