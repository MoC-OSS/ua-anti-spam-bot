import { languageDetectService } from './language-detect.service';

describe('LanguageDetectService', () => {
  describe('isRussian', () => {
    it('should return true if russian', async () => {
      const text = '—Å—ä–µ—à—å –µ—â–µ —ç—Ç–∏—Ö —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±—É–ª–æ–∫';
      const result = await languageDetectService.isRussian(text);

      expect(result.result).toEqual(true);
    });

    it('should return true if russian edge case', async () => {
      const text =
        'üóÇ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
        '\n' +
        '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.\n' +
        '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.';
      const result = await languageDetectService.isRussian(text);

      expect(result.result).toEqual(true);
    });

    it('should return false if ukrainian edge case', async () => {
      const text = '–ù–∞–∂–µ—Ä–ª–∏—Å—å –≥—Ä–µ—á–∫–∏ —ñ —Å–µ—Ä—É—Ç—å';
      const result = await languageDetectService.isRussian(text);

      expect(result.result).toEqual(false);
    });

    it('should return false if ukrainian', async () => {
      const text = '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –±—É–ª–∏ –≤–∑—ñ—Ä—Ü–µ–º –¥–ª—è –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö, —Ö—Ç–æ —Ö–æ—á–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ';
      const result = await languageDetectService.isRussian(text);

      expect(result.result).toEqual(false);
    });
  });

  describe('detect', () => {
    it('should detect russian', async () => {
      const text = '—Å—ä–µ—à—å –µ—â–µ —ç—Ç–∏—Ö —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±—É–ª–æ–∫';
      const result = await languageDetectService.detect(text);

      expect(result).toMatchSnapshot();
    });

    it('should detect surzhik', async () => {
      const text = "–î–æ–±—Ä–µ —É—Ç—Ä–æ. –Ø–∫ –¥—ñ–ª–∞? –æ–ø–ª–∞—Ç–∏—Ç–∏ –±—ñ–ª—î—Ç—ñ–∫–∏. –ø—Ä–µ–¥''—è–≤–∏—Ç–∏ —É–¥–æ—Å—Ç–æ–≤—ñ—Ä—î–Ω—ñ—î";
      const result = await languageDetectService.detect(text);

      expect(result).toMatchSnapshot();
    });

    it('should detect ukrainian', async () => {
      const text = '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –±—É–ª–∏ –≤–∑—ñ—Ä—Ü–µ–º –¥–ª—è –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö, —Ö—Ç–æ —Ö–æ—á–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ';
      const result = await languageDetectService.detect(text);

      expect(result).toMatchSnapshot();
    });

    it('should not detect russian when mixed', async () => {
      const text =
        '—Å—ä–µ—à—å –µ—â–µ —ç—Ç–∏—Ö —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±—É–ª–æ–∫. –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –±—É–ª–∏ –≤–∑—ñ—Ä—Ü–µ–º –¥–ª—è –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö, —Ö—Ç–æ —Ö–æ—á–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ.';
      const result = await languageDetectService.detect(text);

      expect(result).toMatchSnapshot();
    });
  });
});
