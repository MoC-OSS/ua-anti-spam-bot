import { mockDynamicStorageService } from './_mocks/index.mocks';
import { CounteroffensiveService } from './counteroffensive.service';

const testCases = [
  'контр наступальний',
  'контр наступний крок',
  'контр наступу',
  'контр наступна хода',
  'контр наступу ворога',
  'контр наступний етап',
  'контр наступний виклик',
  'контр наступувати',
  'контр наступна команда',
  'контр наступної хвилі',
  'контр-наступ',
  'контр-наступні дії',
  'контр-наступна операція',
  'контр-наступний етап бою',
  'контр-наступний рух',
  'контр-наступний удар',
  'контр-наступний маневр',
  'контр-наступний план',
  'контр-наступний стратегічний крок',
  'контр-наступний військовий блок',
  'розгорнути контрнаступ',
  'вести контрнаступ',
  'організувати контрнаступ',
  'успішний контрнаступ',
  'стратегічний контрнаступ',
  'тактичний контрнаступ',
  'силовий контрнаступ',
  'провести контрнаступ',
  'загальний план контрнаступу',
  'відбити ворожий контрнаступ',
  'Після проведення нападу ворога наша армія розгорнула контрнаступ.',
  'Контрнаступ виявився успішним, ми змогли відбити ворожий наступ.',
  'Нам потрібно здійснити контрнаступ, щоб відбити ворожий наступ.',
  'Ворог готується до нападу, ми повинні провести контрнаступ.',
  'Нарада штабу прийняла рішення про проведення контрнаступної операції.',
  'Успішний контрнаступ дозволив нам зупинити ворожий наступ.',
  'Військовий командир рішуче вів своїх бійців до контрнаступу.',
  'Ефективно організований контрнаступ дозволив нам зберегти позиції.',
  'В рамках контрнаступу були розгорнуті додаткові війська.',
  'Під час контрнаступу наші війська зазнали мінімальних втрат.',
  'контрнаступ',
  'контрнаступу',
  'контрнаступові',
  'контрнаступ',
  'контрнаступом',
  'на контрнаступі',
  'контрнаступе',
  'контрнаступи',
  'контрнаступів',
  'контрнаступам',
  'контрнаступи',
  'контрнаступами',
  'на контрнаступах',
  'контрнаступи',
];

const counteroffensiveService = new CounteroffensiveService(mockDynamicStorageService);

describe('CounteroffensiveService', () => {
  describe('isCounteroffensive', () => {
    it('should mark all messages', () => {
      const notValid = testCases.find((testCase) => !counteroffensiveService.isCounteroffensive(testCase).result);
      const result = !notValid;

      expect(notValid).toBeUndefined();
      expect(result).toBeTruthy();
    });
  });
});
